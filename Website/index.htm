<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Elegoo Saturn Control Center</title>
  <meta name="description" content="A Simple Elegoo Saturn Printer Control Center.">
  <meta name="author" content="Ediz Aziz">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
    integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"
    integrity="sha512-Tn2m0TIpgVyTzzvmxLNuqbSJH3JP8jm+Cy3hvHrW7ndTDcJ1w5mBiksqDBb8GpE2ksktFvDB/ykZ0mDpsZj20w=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

  <style type="text/css">
    .form-check-input {
      clear: left;
    }

    .form-switch.form-switch-sm {
      margin-bottom: 0.5rem;
      /* JUST FOR STYLING PURPOSE */
    }

    .form-switch.form-switch-sm .form-check-input {
      height: 1rem;
      width: calc(1rem + 0.75rem);
      border-radius: 2rem;
    }

    .form-switch.form-switch-md {
      margin-bottom: 1rem;
      /* JUST FOR STYLING PURPOSE */
    }

    .form-switch.form-switch-md .form-check-input {
      height: 1.5rem;
      width: calc(2rem + 0.75rem);
      border-radius: 3rem;
    }

    .form-switch.form-switch-lg {
      margin-bottom: 1.5rem;
      /* JUST FOR STYLING PURPOSE */
    }

    .form-switch.form-switch-lg .form-check-input {
      height: 2rem;
      width: calc(3rem + 0.75rem);
      border-radius: 4rem;
    }

    .form-switch.form-switch-xl {
      margin-bottom: 2rem;
      /* JUST FOR STYLING PURPOSE */
    }

    .form-switch.form-switch-xl .form-check-input {
      height: 2.5rem;
      width: calc(4rem + 0.75rem);
      border-radius: 5rem;
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="row">
      <div class="col-12 mb-4">
        <h1>
          Elegoo Saturn Control Center
        </h1>
      </div>
      <div class="col-6">
        <div class="card text-center">
          <div class="card-header">
            <span class="fw-bold">Ambient <i class="fas fa-temperature-high"></i> <span id="ambient-temp"
                class="fw-normal"></span></span> -
            <span class="fw-bold">Heater <i class="fas fa-temperature-high"></i> <span id="heater-temp"
                class="fw-normal"></span></span>
          </div>
          <div class="card-body">
            <h5 class="card-title">Heater</h5>
            <p class="card-text">Printer's chamber heater status.</p>
            <div class="form-check form-switch form-switch-xl">
              <input class="form-check-input" type="checkbox" id="flexSwitchCheckHeater">
              <label class="form-check-label col-form-label-lg" for="flexSwitchCheckHeater"
                id="flexSwitchHeaterLabel">Heater off <i class="fas fa-fan"></i></label>
            </div>
          </div>
        </div>
      </div>
      <div class="col-6">
        <div class="card text-center">
          <div class="card-header">
            &nbsp;
          </div>
          <div class="card-body">
            <h5 class="card-title">Printer</h5>
            <p class="card-text">Printer's power status</p>
            <div class="form-check form-switch form-switch-xl">
              <input class="form-check-input" type="checkbox" id="flexSwitchCheckPrinter">
              <label class="form-check-label col-form-label-lg" for="flexSwitchCheckPrinter"
                id="flexSwitchPrinterLabel">Printer off <i class="fas fa-power-off"></i></label>
            </div>
          </div>
        </div>
      </div>

      <div class="col-12">
        <div class="card text-center mt-4">
          <div class="card-header">
            &nbsp;
          </div>
          <div class="card-body">
            <h5 class="card-title">Misc</h5>
            <p class="card-text">Stop polling for system status or Reset system & Refresh page</p>
            <a id="btn-reset-system" class="btn btn-primary" href="">
              Reset System
            </a>

            <a id="btn-stop-polling" class="btn btn-primary" href=" ">
              Stop Polling
            </a>
          </div>
        </div>
      </div>

    </div>
  </div>

  <!-- your content here... -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ"
    crossorigin="anonymous"></script>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"
    integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

  <!-- <script src="http://saturn.arduino.local/js/index.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script> -->


  <script>
    var systemStatus = {};
    $(function () {
      var self = this;

      self.$flexSwitchCheckHeater = $("#flexSwitchCheckHeater");
      self.$flexSwitchHeaterLabel = $("#flexSwitchHeaterLabel");
      self.$flexSwitchCheckPrinter = $("#flexSwitchCheckPrinter");
      self.$flexSwitchPrinterLabel = $("#flexSwitchPrinterLabel");
      self.isPolling = false;
      self.pollingCount = 0;
      self.pollingLimit = 1000;

      self.resetSystem = () => {
        $.get("//192.168.1.112/?ResetSystem", function (data) {
          setTimeout(() => {
            window.location.href = "/";
          }, 3000);
        });
      };

      self.getSystemStatus = () => {
        $.getJSON("//192.168.1.112/GetStatus", function (data) {
          systemStatus = data;
          $("#ambient-temp").html(data.temperature.ambient);
          $("#heater-temp").html(data.temperature.heater);

          self.$flexSwitchCheckHeater.prop('checked', data.isHeaterOn);
          self.$flexSwitchCheckPrinter.prop('checked', data.isPrinterOn);

          self.setHeaterStatusLabel();
          self.setPrinterStatusLabel();

          if (/*data.isPrinterOn &&*/ !self.isPolling) {
            self.isPolling = true;
            self.startPolling();
          }

          // if(/*!data.isPrinterOn &&*/ self.isPolling){
          //     self.cancelPolling();
          // }

          if (!data.isPrinterOn && self.pollingCount > self.pollingLimit) {
            self.resetSystem();
          }
        });
      }

      if (!self.isPolling) {
        self.getSystemStatus();
      }

      self.startPolling = () => {
        poll(() => new Promise((resolve) => {
          self.isPolling = true;
          self.pollingCount++;
          self.getSystemStatus();
          resolve(); //you need resolve to jump into .then()
        }), 5000, 10000);
      }

      self.cancelPolling = () => {
        cancelCallback();
        self.isPolling = false;
      }

      self.setHeaterStatusLabel = () => {
        if (self.$flexSwitchCheckHeater.is(':checked')) {
          self.$flexSwitchHeaterLabel.html(`Heater on <i class="fas fa-fan fa-spin"></i>`);
        }
        else {
          self.$flexSwitchHeaterLabel.html(`Heater off <i class="fas fa-fan"></i>`);
        }
      };
      self.setPrinterStatusLabel = () => {
        if (self.$flexSwitchCheckPrinter.is(':checked')) {
          self.$flexSwitchPrinterLabel.html(`Printer on <i class="fas fa-power-off text-success"></i>`);
        }
        else {
          self.$flexSwitchPrinterLabel.html(`Printer off <i class="fas fa-power-off text-danger"></i>`);
        }
      };

      self.$flexSwitchCheckHeater.on("change", (e) => {
        var value = self.$flexSwitchCheckHeater.is(':checked') ? "on" : "off";

        $.get("//192.168.1.112/?HeaterPower=" + value, function (data) {
          self.getSystemStatus();
        });

      });

      self.$flexSwitchCheckPrinter.on("change", (e) => {
        var value = self.$flexSwitchCheckPrinter.is(':checked') ? "on" : "off";

        $.get("//192.168.1.112/?PrinterPower=" + value, function (data) {
          self.getSystemStatus();
        });
      });

      $("#btn-reset-system").on("click", function (e) {
        self.resetSystem();
        e.preventDefault();
      });

      $("#btn-stop-polling").on("click", function (e) {
        cancelCallback();

        e.preventDefault();
      });


    });

    let cancelCallback = () => { };

    var sleep = (period) => {
      return new Promise((resolve) => {
        cancelCallback = () => {
          //console.log("Canceling...");
          // send cancel message...
          return resolve('Canceled');
        }
        setTimeout(() => {
          resolve("tick");
        }, period)
      })
    }

    var poll = (promiseFn, period, timeout) => promiseFn().then(() => {
      let asleep = async (period) => {
        let respond = await sleep(period);
        // if you need to do something as soon as sleep finished
        //console.log("sleep just finished, do something...");
        return respond;
      }


      // just check if cancelCallback is empty function, 
      // if yes, set a time out to run cancelCallback()
      if (cancelCallback.toString() === "() => {}") {
        //console.log("set timeout to run cancelCallback()")
        setTimeout(() => {
          cancelCallback()
        }, timeout);
      }

      asleep(period).then((respond) => {
        // check if sleep canceled, if not, continue to poll
        if (respond !== 'Canceled') {
          poll(promiseFn, period);
        } else {
          console.log(respond);
        }
      })
    })
  </script>
</body>

</html>